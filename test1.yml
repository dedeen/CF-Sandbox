## Test script for cmdrunner 
#   -- Dan Edeen, dan@dsblue.net, 2022  --   

AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This stack is a test of cmdrunner use. 

Parameters: 
  EnvironmentName:
    Description: Treating a VPC as a DCenter, will prefix resources with name
    Type: String
    Default: DataCenter1
  
  OwnerTag:
    Description: Using tags to track resources built
    Type: String
    Default: dan-via-cloudformation

  VpcCIDR:
    Description: As per the name
    Type: String
    Default: 192.168.0.0/16

  PublicSubnet1CIDR: 
    Description: As per the name
    Type: String
    Default: 192.168.1.0/24

  PrivateSubnet1CIDR: 
    Description: As per the name
    Type: String
    Default: 192.168.2.0/24

  IntraSubnet1CIDR: 
    Description: No route in/out except intraVPC
    Type: String
    Default: 192.168.3.0/24

Resources: 
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Owner
          Value: !Ref OwnerTag
        - Key: Name
          Value: !Ref EnvironmentName
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet1 (AZ1)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet1 (AZ1)

  IntraSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref IntraSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Intra Subnet1 (AZ2)

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT-GW

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes (AZ1)

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  IntraRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private (Intra) Routes (AZ2)

  DefaultIntraRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref IntraRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  IntraSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref IntraRouteTable1
      SubnetId: !Ref IntraSubnet1

  NoIngressSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-SG"
      GroupDescription: "no ingress"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: no-ingress-SG

############
# Tagging cross-stack references with -csrx
Outputs:
  #VPC:
  #  Description: A reference to the created VPC
  #  Value: !Ref VPC

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1

  IntraSubnet1:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref IntraSubnet1

# Output to use in cross-stack references 
  PublicSubnetID:
    Description: SubnetID of the public snet
    Value: !Ref PublicSubnet1
    Export:
      Name: 
        'Fn::Sub': '${AWS::StackName}-PublicSubnet1-csrx'

  VpcID:
    Description: ID of VPC created in this stack
    Value: !Ref VPC
    Export:
      Name: 
        'Fn::Sub': '${AWS::StackName}-VPCID-csrx'
 
########################
   
